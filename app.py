import streamlit as st

# 호봉별 월급 데이터
호봉별_월급 = {
    1: 1806700, 2: 1861400, 3: 1916900, 4: 1972200, 5: 2028000,
    6: 2083600, 7: 2138700, 8: 2194200, 9: 2249700, 10: 2305200,
    11: 2350600, 12: 2405700, 13: 2461200, 14: 2516700, 15: 2572300,
    16: 2819000, 17: 2874600, 18: 2930100, 19: 2985600, 20: 3055300,
    21: 3377600, 22: 3502000, 23: 3625800, 24: 3749800, 25: 3873600,
    26: 3997900, 27: 4127500, 28: 4256800, 29: 4386400, 30: 4515900,
    31: 4633100, 32: 4750600, 33: 4868300, 34: 5072400, 35: 5224900,
    36: 5346200, 37: 5464800, 38: 5648400, 39: 5765400, 40: 5821200
}

# 사용자 선택: 호봉 또는 연봉 입력
st.title("연말정산 계산기")
st.header("연봉 입력 방식 선택")
입력_방식 = st.radio("연봉을 입력하는 방식을 선택하세요:", ("호봉 기준", "직접 입력"))

# 연봉 계산
연봉 = 0
if 입력_방식 == "호봉 기준":
    st.header("호봉 기반 연봉 계산")
    호봉 = st.number_input("호봉 입력 (1~40)", min_value=1, max_value=40, step=1)
    if 호봉 in 호봉별_월급:
        월급 = 호봉별_월급[호봉]
        연봉 = 월급 * 12
        st.success(f"입력한 호봉({호봉}호봉)에 따른 연봉은 {연봉:,.0f}원입니다.")
    else:
        st.warning("올바른 호봉을 입력하세요.")
elif 입력_방식 == "직접 입력":
    st.header("연봉 직접 입력")
    연봉 = st.number_input("연봉 입력 (원)", min_value=0, step=1000000)
    if 연봉 > 0:
        st.success(f"입력한 연봉은 {연봉:,.0f}원입니다.")
    else:
        st.warning("연봉을 입력하세요.")

# 소득공제 및 세액공제 계산
if 연봉 > 0:
    # 신용카드 및 체크카드 사용액 입력
    st.header("신용카드 및 체크카드 사용액 입력")
    신용카드_사용액 = st.number_input("신용카드 사용액 (원)", min_value=0)
    체크카드_사용액 = st.number_input("체크카드 및 현금영수증 사용액 (원)", min_value=0)

    # 인적공제 입력
    st.header("인적공제 입력")
    본인공제 = 1500000  # 기본 공제
    부양가족_수 = st.number_input("부양가족 수 (본인 제외)", min_value=0, step=1)
    부양가족공제 = 부양가족_수 * 1500000
    총_인적공제 = 본인공제 + 부양가족공제
    st.success(f"총 인적공제액: {총_인적공제:,.0f}원")

    if 신용카드_사용액 > 0 or 체크카드_사용액 > 0:
        신용카드공제 = 신용카드_사용액 * 0.15
        체크카드공제 = 체크카드_사용액 * 0.3
        총_소득공제 = 신용카드공제 + 체크카드공제 + 총_인적공제
        st.success(f"총 소득공제액: {총_소득공제:,.0f}원")

        # 소득공제 후 과세표준 계산
        과세표준 = max(0, 연봉 - 총_소득공제)
        산출세액 = 과세표준 * 0.06  # 기본 세율 6%
        st.info(f"과세표준: {과세표준:,.0f}원, 산출세액: {산출세액:,.0f}원")

        # 근로소득 세액공제 계산
        st.header("근로소득 세액공제 계산")
        if 산출세액 <= 1300000:
            근로소득공제 = 산출세액 * 0.55
        else:
            근로소득공제 = 715000 + (산출세액 - 1300000) * 0.3
            근로소득공제 = min(근로소득공제, 740000)  # 최대 한도 적용
        결정세액 = max(0, 산출세액 - 근로소득공제)
        st.success(f"근로소득 세액공제 적용 후 결정세액: {결정세액:,.0f}원")

        # 세액공제 항목 입력 및 계산
        st.header("세액공제 항목 입력")
        보험료_납입액 = st.number_input("보험료 납입액 (원)", min_value=0)
        의료비_지출액 = st.number_input("의료비 지출액 (원)", min_value=0)
        교육비_납입액 = st.number_input("교육비 납입액 (원)", min_value=0)
        기부금_납입액 = st.number_input("기부금 납입액 (원)", min_value=0)
        연금저축_IRP_납입액 = st.number_input("연금저축/IRP 납입액 (원)", min_value=0)

        # 세액공제 계산 로직
        보험료_세액공제 = 보험료_납입액 * 0.12
        의료비_세액공제 = max(0, (의료비_지출액 - 연봉 * 0.03)) * 0.15
        교육비_세액공제 = 교육비_납입액 * 0.15
        기부금_세액공제 = 기부금_납입액 * 0.15
        if 연봉 <= 55000000:  # 연금저축/IRP 공제율 차등 적용
            연금저축_IRP_세액공제 = 연금저축_IRP_납입액 * 0.165
        else:
            연금저축_IRP_세액공제 = 연금저축_IRP_납입액 * 0.132

        총_세액공제 = (보험료_세액공제 + 의료비_세액공제 +
                     교육비_세액공제 + 기부금_세액공제 +
                     연금저축_IRP_세액공제)
        최종_결정세액 = max(0, 결정세액 - 총_세액공제)
        st.success(f"추가 세액공제 적용 후 최종 결정세액: {최종_결정세액:,.0f}원")

        # 기납부세액 입력
        st.header("기납부세액 입력")
        기납부세액 = st.number_input("기납부세액 (원)", min_value=0)

        # 최종 세금 차이 계산 및 조언 문구 출력
        세금_차이 = 기납부세액 - 최종_결정세액
        if 세금_차이 > 0:
            st.success(f"환급받을 세액: {세금_차이:,.0f}원입니다.")
        elif 세금_차이 < 0:
            추가_연금저축 = -세금_차이 / 0.165
            st.warning(f"추가 납부해야 할 세액: {-세금_차이:,.0f}원입니다. 연금저축에 {추가_연금저축:,.0f}원을 추가 납입하면 세금을 절감할 수 있습니다.")
        else:
            st.info("추가 납부하거나 환급받을 세액이 없습니다.")
